/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package serverdemo2;

import DataPackage.Data;
import DataPackage.Order;
import DataPackage.Patient;
import DataPackage.Product;
import DataPackage.ProductOnCart;
import DataPackage.User;
import java.awt.Color;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MoHaTiGha
 */
public class serverUI extends javax.swing.JFrame {

    static boolean isRunning = false;
    static int i = 0;
    static boolean stopped = false;
    static int mouseX, mouseY;
    DateTimeFormatter formatterDateAndHour = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    static ArrayList<ClientHandler> Clients = new ArrayList();
    //static ArrayList<ClientThread> ClientsThread = new ArrayList();
    static ArrayList<Product> ProductsStock = new ArrayList();
    static ArrayList<Order> OrdersList = new ArrayList();
    static ArrayList<Patient> PatientsList = new ArrayList();
    static ServerSocket serverSocket;

    /**
     * Creates new form serverUI
     */
    public serverUI() {
        initComponents();
        getConnectedClientsLabel().setText("0");
        getConnectedClientsLabel().setForeground(Color.green.darker().darker());
        getDisconnectClientButton().setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        serverStatusLabel = new javax.swing.JLabel();
        connectedClientsLabel = new javax.swing.JLabel();
        startServerButton = new javax.swing.JButton();
        stopServerButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientsTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        clientIDLabel = new javax.swing.JLabel();
        clientSessionLabel = new javax.swing.JLabel();
        disconnectClientButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        clientTimeJoinedLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(51, 204, 0));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Server Management Panel");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Server Status");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Clients Connected");

        serverStatusLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        serverStatusLabel.setForeground(new java.awt.Color(255, 0, 0));
        serverStatusLabel.setText("Offline");

        connectedClientsLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        connectedClientsLabel.setForeground(new java.awt.Color(51, 153, 0));
        connectedClientsLabel.setText("0");

        startServerButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        startServerButton.setText("Start Server");
        startServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerButtonActionPerformed(evt);
            }
        });

        stopServerButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        stopServerButton.setText("Exit");
        stopServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopServerButtonActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/assets/logo5.png"))); // NOI18N

        clientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Logged in", "Role", "Time Joined"
            }
        ));
        clientsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                clientsTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(clientsTable);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Client's ID");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Client's Session");

        clientIDLabel.setText("no client were selected");

        clientSessionLabel.setText("no client were selected");

        disconnectClientButton.setText("Disconnect");
        disconnectClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectClientButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Client's Time Joined");

        clientTimeJoinedLabel.setText("no client were selected");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(serverStatusLabel)
                                    .addComponent(connectedClientsLabel))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(disconnectClientButton)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(startServerButton)
                                .addGap(18, 18, 18)
                                .addComponent(stopServerButton)
                                .addGap(44, 44, 44)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(clientTimeJoinedLabel))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel6))
                                        .addGap(38, 38, 38)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(clientSessionLabel)
                                            .addComponent(clientIDLabel))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(serverStatusLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(connectedClientsLabel)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startServerButton)
                            .addComponent(stopServerButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disconnectClientButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(clientTimeJoinedLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(clientIDLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(clientSessionLabel))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(423, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    Thread Listening = new Thread(new Runnable() {
        @Override
        public void run() {
            try {
                // TODO add your handling code here:
                serverSocket = new ServerSocket(4999);
                while (isRunning) {
                    getServerStatusLabel().setText("Online");
                    getServerStatusLabel().setForeground(Color.green.darker().darker());
                    Socket socket = serverSocket.accept();
                    System.out.println("Connected");
                    i++;
                    ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
                    ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream());
                    ClientHandler client = new ClientHandler("Client "+i,"Client " + i, socket, objectInputStream, objectOutputStream);
                    objectOutputStream.writeObject(new Data("CLIENT ID",client.ID));
                    Data dataRec = (Data) objectInputStream.readObject();
                    if (dataRec.getInstruction().equals("CLIENT NAME")) {
                        client.Name = (String) dataRec.getObject();
                    }
                    System.out.println("SENT");
                    Clients.add(client);
                    Thread clientThread = new Thread(client);
                    //ClientsThread.add(new ClientThread(clientThread,client.Name));
                    getConnectedClientsLabel().setText(String.valueOf(Clients.size()));
                    clientThread.start();
                    fetchClientsTable();
                    Thread receiveMsg = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            while (isRunning) {
                                try {
                                    Data DataReceived = (Data) objectInputStream.readObject();
                                    String Instruction = DataReceived.getInstruction();
                                    System.out.println(Instruction);
                                    if (Instruction.equals("FETCH PRODUCTS")) {
                                        initialize();
                                        for (ClientHandler client : Clients) {
                                            client.objectOutputStream.writeObject(new Data("PRODUCTS GIVEN", ProductsStock));
                                        }
                                    } else if (Instruction.equals("ADD PRODUCT")) {
                                        Product productToAdd = (Product) DataReceived.getObject();
                                        Timestamp expDate = Timestamp.valueOf(productToAdd.getExpDate());
                                        AddMedication(String.valueOf(productToAdd.getID()), productToAdd.getName(), String.valueOf(productToAdd.getSellPrice()), String.valueOf(productToAdd.getBuyPrice()), String.valueOf(productToAdd.getQuantity()), expDate, productToAdd.getCategory());
                                        initialize();
                                        for (ClientHandler client : Clients) {
                                            client.objectOutputStream.writeObject(new Data("PRODUCTS GIVEN", ProductsStock));
                                        }
                                    } else if (Instruction.equals("DELETE PRODUCT")) {
                                        Product productToDelete = (Product) DataReceived.getObject();
                                        Remove("medications", String.valueOf(productToDelete.getID()));
                                        initialize();
                                        for (ClientHandler client : Clients) {
                                            client.objectOutputStream.writeObject(new Data("PRODUCTS GIVEN", ProductsStock));
                                        }
                                    } else if (Instruction.equals("EXIT")) {
                                        String clientExited = (String) DataReceived.getObject();
                                        System.out.println(clientExited + " WANTS TO EXIT");
                                        for (int i = 0; i < Clients.size(); i++) {
                                            if (Clients.get(i).Name.equals(clientExited)) {
                                                Clients.remove(i);
                                            }
                                        }
                                        stopped = true;
                                        getConnectedClientsLabel().setText(String.valueOf(Clients.size()));
                                        fetchClientsTable();
                                        initializeLabels();
                                        break;
                                    } else if (Instruction.equals("ADD ORDER")) {
                                        Order orderToAdd = (Order) DataReceived.getObject();
                                        AddPatient(String.valueOf(orderToAdd.getPatient().getID()), orderToAdd.getPatient().getFirstName(), orderToAdd.getPatient().getLastName(), orderToAdd.getPatient().getPhoneNumber(), orderToAdd.getPatient().getAdress(), orderToAdd.getPatient().getNote(), String.valueOf(orderToAdd.getPatient().getAge()), orderToAdd.getPatient().getGender());
                                        AddLog(String.valueOf(orderToAdd.getID()), String.valueOf(orderToAdd.getPatient().getID()), String.valueOf(orderToAdd.getID()), String.valueOf(orderToAdd.getTotal()), Timestamp.valueOf(orderToAdd.getDate()));
                                        for (ProductOnCart prod : orderToAdd.getPurchases()) {
                                            AddPurchase(String.valueOf(orderToAdd.getID()), String.valueOf(prod.getProduct().getID()), String.valueOf(prod.getQuantity()));
                                        }
                                        System.out.println("ORDER ADDED");
                                    } else if (Instruction.equals("FETCH ORDERS")) {
                                        initializeOrders();
                                        for (ClientHandler client : Clients) {
                                            client.objectOutputStream.writeObject(new Data("ORDERS GIVEN", OrdersList));
                                        }
                                    } else if (Instruction.equals("FETCH PATIENTS")) {
                                        initializePatients();
                                        for (ClientHandler client : Clients) {
                                            client.objectOutputStream.writeObject(new Data("PATIENTS GIVEN", PatientsList));
                                        }
                                    } else if (Instruction.equals("UPDATE PRODUCT")) {
                                        Product prodToUpdate = (Product) DataReceived.getObject();
                                        UpdateProduct(prodToUpdate);
                                        System.out.println("UPDATED " + prodToUpdate.getName());
                                        initialize();
                                        for (ClientHandler client : Clients) {
                                            client.objectOutputStream.writeObject(new Data("PRODUCTS GIVEN", ProductsStock));
                                        }
                                    } else if (Instruction.equals("UPDATE ORDER")) {
                                        Patient newPatient = (Patient) DataReceived.getObject();
                                        System.out.println("PATIENT ID " + newPatient.getID());
                                        UpdatePatient2(newPatient);
                                        initializePatients();
                                        for (ClientHandler client : Clients) {
                                            client.objectOutputStream.writeObject(new Data("ORDER UPDATED", PatientsList));
                                        }
                                    } else if (Instruction.equals("DELETE ORDER")) {
                                        Order orderToDelete = (Order) DataReceived.getObject();
                                        Remove("log", String.valueOf(orderToDelete.getID()));
                                        RemovePurchases(String.valueOf(orderToDelete.getID()));
                                        initializeOrders();
                                        for (ClientHandler client : Clients) {
                                            client.objectOutputStream.writeObject(new Data("ORDERS GIVEN", OrdersList));
                                        }
                                    } else if (Instruction.equals("LOGIN")) {
                                        User newUser = (User) DataReceived.getObject();
                                        boolean isUserExist = UserTest(newUser.getUserName(), newUser.getPassword());
                                        boolean isAdmin = isAdmin(newUser.getUserName());
                                        System.out.println("DOES IT EXISTS " + isUserExist);
                                        System.out.println("IS IT ADMIN " + isAdmin);
                                        if (isUserExist) {
                                            newUser.setIsAdmin(isAdmin);
                                            for (ClientHandler client : Clients) {
                                                if (client.ID.equals(newUser.getClient())) {
                                                    client.isLoggedIn = true;
                                                    client.currentUser = newUser;
                                                    client.objectOutputStream.writeObject(new Data("LOGIN OK", newUser));
                                                    fetchClientsTable();
                                                }
                                            }
                                        }else{
                                            for (ClientHandler client : Clients) {
                                                if (client.ID.equals(newUser.getClient())) {
                                                    client.objectOutputStream.writeObject(new Data("LOGIN ERROR", null));
                                                }
                                            }
                                        }
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                            System.out.println("CLOSING");
                            try {
                                socket.close();
                            } catch (IOException ex) {
                                ex.printStackTrace();
                            }
                        }
                    });
                    receiveMsg.start();
                }
                System.out.println("STOPPED");
            } catch (IOException ex) {
                Logger.getLogger(serverUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(serverUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    });

    public static boolean isAdmin(String UserName) {
        String query = "SELECT * FROM users";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            Statement st1 = connection.createStatement();
            ResultSet rs = st1.executeQuery(query);
            while (rs.next()) {
                if (UserName.equals(rs.getString("username"))) {
                    if (rs.getBoolean("admin")) {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    public static boolean UserTest(String UserName, String Password) {
        String query = "SELECT * FROM users";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            Statement st1 = connection.createStatement();
            ResultSet rs = st1.executeQuery(query);
            while (rs.next()) {
                if (UserName.equals(rs.getString("username")) && Password.equals(rs.getString("password"))) {
                    return true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    void initializeLabels() {
        getClientIDLabel().setText("no client were selected");
        getClientSessionLabel().setText("no client were selected");
        getConnectedClientsLabel().setText(String.valueOf(Clients.size()));
    }

    void fetchClientsTable() {
        DefaultTableModel clientsTable = (DefaultTableModel) getClientsTable().getModel();
        int rowCount = clientsTable.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            clientsTable.removeRow(0);
        }
        for (ClientHandler Client : Clients) {
            String isLogged;
            String isAdmin;
            if(Client.isLoggedIn)isLogged = "YES"; else isLogged = "NO";
            if(Client.currentUser == null) isAdmin = "NO"; else {
                if(Client.currentUser.isIsAdmin()) isAdmin = "Admin"; else isAdmin = "Regular";
            }
            clientsTable.addRow(new Object[]{Client.ID,Client.Name,isLogged,isAdmin, Client.TimeJoined.format(formatterDateAndHour)});
        }
    }

    ClientHandler getClientByID(String ID) {
        ClientHandler selectedClient = null;
        for (ClientHandler client : Clients) {
            if (client.ID.equals(ID)) {
                selectedClient = client;
            }
        }
        return selectedClient;
    }
    private void startServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServerButtonActionPerformed
        getStartServerButton().setEnabled(false);
        getStopServerButton().setText("Stop and Exit");
        System.out.println("CLICKED");
        if (isRunning == false) {
            isRunning = true;
            Listening.start();
        } else if (isRunning == true) {
            try {
                serverSocket = new ServerSocket(4999);
            } catch (IOException ex) {
                Logger.getLogger(serverUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_startServerButtonActionPerformed


    private void stopServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopServerButtonActionPerformed
        for (ClientHandler client : Clients) {
            try {
                client.objectOutputStream.writeObject(new Data("EXIT NOW", null));
            } catch (IOException ex) {
                Logger.getLogger(serverUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.exit(0);
    }//GEN-LAST:event_stopServerButtonActionPerformed

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // TODO add your handling code here:
        mouseX = evt.getX();
        mouseY = evt.getY();
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        // TODO add your handling code here:
        new serverUI().setLocation(new serverUI().getX() + evt.getX() - mouseX, new serverUI().getY() + evt.getY() - mouseY);
    }//GEN-LAST:event_jPanel1MouseDragged


    private void clientsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientsTableMousePressed
        // TODO add your handling code here:
        stopped = true;
        getDisconnectClientButton().setEnabled(true);
        String selectedClientID = (String) getClientsTable().getValueAt(getClientsTable().getSelectedRow(), 0);
        ClientHandler clientSelected = getClientByID(selectedClientID);
        getClientIDLabel().setText(clientSelected.Name);
        Thread sessionPeriodCounter = new Thread(new Runnable() {
            @Override
            public void run() {
                stopped = false;
                while (true) {
                    Duration duration = Duration.between(clientSelected.TimeJoined, LocalDateTime.now());
                    getClientSessionLabel().setText(String.valueOf(duration.toDays() + " d " + duration.toHours()%24 + " h " +duration.toMinutes()%60+ " m " +duration.toSeconds()%60 + " s"));
                    if (stopped == true) {
                        break;
                    }
                }
            }
        });
        sessionPeriodCounter.start();
    }//GEN-LAST:event_clientsTableMousePressed

    private void disconnectClientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectClientButtonActionPerformed
        try {
            stopped = true;
            // TODO add your handling code here:
            String selectedClientID = (String) getClientsTable().getValueAt(getClientsTable().getSelectedRow(), 0);
            ClientHandler clientSelected = getClientByID(selectedClientID);
            clientSelected.objectOutputStream.writeObject(new Data("EXIT NOW", null));
            for (int i = 0; i < Clients.size(); i++) {
                if (Clients.get(i).ID.equals(clientSelected.ID)) {
                    Clients.remove(i);
                }
            }
            initializeLabels();
            fetchClientsTable();
        } catch (IOException ex) {
            Logger.getLogger(serverUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_disconnectClientButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(serverUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(serverUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(serverUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(serverUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new serverUI().setVisible(true);
            }
        });
    }

    public static void RemovePurchases(String Order_ID) {
        String query = "DELETE FROM purchases WHERE code= '" + Order_ID + "'";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "ronahaytem78");
            PreparedStatement pst = connection.prepareStatement(query);
            pst.execute(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void initializePatients() {
        ArrayList<Patient> patientArray = new ArrayList();
        String query = "SELECT * FROM patients";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                patientArray.add(new Patient(rs.getInt("code"), rs.getString("first_name"), rs.getString("last_name"), rs.getString("phone_number"), rs.getString("adresse"), rs.getString("note"), Integer.parseInt(rs.getString("age").trim()), rs.getString("gender")));
            }
            PatientsList = patientArray;
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public static void UpdatePatient2(Patient p) {
        String query = "UPDATE patients SET "
                + "code = " + "'" + p.getID() + "',first_name = '" + p.getFirstName() + "',last_name = '" + p.getLastName() + "',age ="
                + " " + p.getAge() + ",phone_number = " + p.getPhoneNumber() + ",adresse = '" + p.getAdress() + "',note = '" + p.getNote() + "' "
                + "WHERE code = " + p.getID() + "";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            PreparedStatement pst = connection.prepareStatement(query);
            pst.execute(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void UpdateProduct(Product p) {
        String query = "UPDATE medications SET "
                + "code = '" + p.getID() + "',name = '" + p.getName() + "',sell_price = " + p.getSellPrice() + ","
                + "buy_price = " + p.getBuyPrice() + ",quantity = " + p.getQuantity() + ",exp_date = '" + p.getExpDate() + "',"
                + "category = '" + p.getCategory() + "' WHERE code = " + p.getID();
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            PreparedStatement pst = connection.prepareStatement(query);
            pst.execute(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void AddPatient(String ID, String FirstName, String LastName, String PhoneNumber, String Adress, String Note, String Age, String Gender) {
        String query = "INSERT INTO patients VALUES ('" + ID + "','" + FirstName + "','" + LastName + "','" + PhoneNumber + "','" + Adress + "','" + Note + "','" + Age + "','" + Gender + "' )";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            PreparedStatement pst = connection.prepareStatement(query);
            pst.execute(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void AddPurchase(String code, String product, String quantity) {
        String query = "INSERT INTO purchases VALUES ('" + code + "','" + product + "'," + quantity + ")";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            PreparedStatement pst = connection.prepareStatement(query);
            pst.execute(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void AddLog(String code, String client, String purchase_ID, String total_price, Timestamp date) {
        String query = "INSERT INTO log VALUES ('" + code + "','" + client + "'," + purchase_ID + "," + total_price + ", TIMESTAMP '" + date + "')";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            PreparedStatement pst = connection.prepareStatement(query);
            pst.execute(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void initializeOrders() {
        ArrayList<Order> tempOrders = new ArrayList();
        String query = "SELECT * FROM log";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            Statement st1 = connection.createStatement();
            Statement st2 = connection.createStatement();
            Statement st3 = connection.createStatement();
            Statement st4 = connection.createStatement();
            ResultSet rs = st1.executeQuery(query);
            while (rs.next()) {
                ResultSet prs = st2.executeQuery("SELECT * FROM patients WHERE code = " + rs.getInt("client") + ";");
                prs.next();
                Patient p = new Patient(prs.getInt("code"), prs.getString("first_name"), prs.getString("last_name"), prs.getString("phone_number"), prs.getString("adresse"), prs.getString("note"), Integer.parseInt(prs.getString("age").trim()), prs.getString("gender"));
                prs.close();
                ResultSet mrs = st3.executeQuery("SELECT * FROM purchases WHERE code = " + rs.getInt("purchase_ID") + ";");
                ArrayList<ProductOnCart> cartArray = new ArrayList<ProductOnCart>();
                while (mrs.next()) {
                    ResultSet srs = st4.executeQuery("SELECT * FROM medications WHERE code = " + mrs.getInt("product") + ";");
                    srs.next();
                    Product m = new Product(srs.getInt("code"), srs.getString("name"), srs.getString("category"), srs.getInt("sell_price"), srs.getInt("buy_price"), srs.getInt("quantity"), srs.getString("exp_date"));
                    srs.close();
                    ProductOnCart poc = new ProductOnCart(m, mrs.getInt("quantity"));
                    cartArray.add(poc);
                }
                Timestamp ts = rs.getTimestamp("date");
                tempOrders.add(new Order(rs.getInt("code"), p, cartArray, ts.toLocalDateTime()));
            }
            OrdersList = tempOrders;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void Remove(String table, String PrimaryKey) {
        String query = "DELETE FROM " + table + " WHERE code= '" + PrimaryKey + "'";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            PreparedStatement pst = connection.prepareStatement(query);
            pst.execute(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void AddMedication(String code, String name, String sell_price, String buy_price, String quantity, Timestamp exp_date, String category) {
        String query = "INSERT INTO medications VALUES ('" + code + "','" + name + "'," + sell_price + "," + buy_price + "," + quantity + ", TIMESTAMP '" + exp_date + "','" + category + "')";
        try {
            System.out.println(query);
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            PreparedStatement pst = connection.prepareStatement(query);
            pst.execute(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void initialize() {
        String query = "SELECT * FROM medications";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/phar_database";
            Connection connection = DriverManager.getConnection(url, "root", "Mohmed.4717");
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(query);
            ArrayList<Product> ProductsStockTemp = new ArrayList();
            while (rs.next()) {
                ProductsStockTemp.add(new Product(rs.getInt("code"), rs.getString("name"), rs.getString("category"), rs.getInt("quantity"), rs.getInt("buy_price"), rs.getInt("sell_price"), rs.getString("exp_date")));
            }
            ProductsStock = ProductsStockTemp;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public JButton getDisconnectClientButton() {
        return disconnectClientButton;
    }

    public JLabel getClientIDLabel() {
        return clientIDLabel;
    }

    public JLabel getClientSessionLabel() {
        return clientSessionLabel;
    }

    public JTable getClientsTable() {
        return clientsTable;
    }

    public JButton getStopServerButton() {
        return stopServerButton;
    }

    public JLabel getConnectedClientsLabel() {
        return connectedClientsLabel;
    }

    public JLabel getServerStatusLabel() {
        return serverStatusLabel;
    }

    public JButton getStartServerButton() {
        return startServerButton;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clientIDLabel;
    private javax.swing.JLabel clientSessionLabel;
    private javax.swing.JLabel clientTimeJoinedLabel;
    private javax.swing.JTable clientsTable;
    private javax.swing.JLabel connectedClientsLabel;
    private javax.swing.JButton disconnectClientButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel serverStatusLabel;
    private javax.swing.JButton startServerButton;
    private javax.swing.JButton stopServerButton;
    // End of variables declaration//GEN-END:variables
}
